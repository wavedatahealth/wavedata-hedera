{
  "language": "Solidity",
  "sources": {
    "contracts/lib/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts v4.4.0 (utils/Strings.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev String operations.\r\n */\r\nlibrary Strings {\r\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\r\n     */\r\n    function toString(uint256 value) internal pure returns (string memory) {\r\n        // Inspired by OraclizeAPI's implementation - MIT licence\r\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\r\n\r\n        if (value == 0) {\r\n            return \"0\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 digits;\r\n        while (temp != 0) {\r\n            digits++;\r\n            temp /= 10;\r\n        }\r\n        bytes memory buffer = new bytes(digits);\r\n        while (value != 0) {\r\n            digits -= 1;\r\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\r\n            value /= 10;\r\n        }\r\n        return string(buffer);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\r\n     */\r\n    function toHexString(uint256 value) internal pure returns (string memory) {\r\n        if (value == 0) {\r\n            return \"0x00\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 length = 0;\r\n        while (temp != 0) {\r\n            length++;\r\n            temp >>= 8;\r\n        }\r\n        return toHexString(value, length);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\r\n     */\r\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\r\n        bytes memory buffer = new bytes(2 * length + 2);\r\n        buffer[0] = \"0\";\r\n        buffer[1] = \"x\";\r\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\r\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\r\n            value >>= 4;\r\n        }\r\n        require(value == 0, \"Strings: hex length insufficient\");\r\n        return string(buffer);\r\n    }\r\n}"
    },
    "contracts/WaveData.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\nimport \"./lib/Strings.sol\";\r\n\r\ncontract WaveData {\r\n    /// User contains all the login information\r\n    struct user_struct {\r\n        /// The ID of the User ID.\r\n        uint256 user_id;\r\n        ///Full Name of user\r\n        string name;\r\n        ///Email of user\r\n        string email;\r\n        ///Password of user\r\n        string password;\r\n        ///Address of Wallet\r\n        string walletaddress;\r\n        /// The User Image\r\n        string image;\r\n        /// The User Credits\r\n        uint256 credits;\r\n        /// The Access Token of wearable\r\n        string accesstoken;\r\n        /// The Fhir ID of the User.\r\n        uint256 fhirid;\r\n    }\r\n\r\n    /// Survy Category Struct contains all the Category information\r\n    struct survey_category_struct {\r\n        ///Name of Category\r\n        string name;\r\n        ///Image Link of Category\r\n        string image;\r\n    }\r\n\r\n    /// Study Struct contains all the study information\r\n    struct study_struct {\r\n        /// The ID of the Study ID.\r\n        uint256 study_id;\r\n        /// The ID of the User ID.\r\n        uint256 user_id;\r\n        /// The Image of the Study\r\n        string image;\r\n        /// The Title of the Study\r\n        string title;\r\n        /// The Description of the Study\r\n        string description;\r\n        /// The Data permission of the Study\r\n        string permission;\r\n        /// The Contributors of the Study\r\n        uint256 contributors;\r\n        /// The Audience of the Study\r\n        uint256 audience;\r\n        /// The Budget of the Study\r\n        uint256 budget;\r\n        /// The Type of the Reward.\r\n        string reward_type;\r\n        /// The Price of the Reward.\r\n        uint256 reward_price;\r\n        /// The Total Spending Limit of the Study.\r\n        uint256 total_spending_limit;\r\n    }\r\n\r\n    /// Survey Struct contains all the survey information\r\n    struct survey_struct {\r\n        /// The ID of the Survey ID.\r\n        uint256 survey_id;\r\n        /// The ID of the Study ID.\r\n        uint256 study_id;\r\n        /// The ID of the User ID.\r\n        uint256 user_id;\r\n        /// The Name of the Survey\r\n        string name;\r\n        /// The Description of the Survey\r\n        string description;\r\n        /// The Date of the Survey\r\n        string date;\r\n        /// The Image of the Survey\r\n        string image;\r\n        /// The Reward of the Survey\r\n        uint256 reward;\r\n        /// The Submission of the Survey\r\n        uint256 submission;\r\n    }\r\n\r\n    /// FHIR user information\r\n    struct fhir_struct {\r\n        /// User ID of the user\r\n        uint256 user_id;\r\n        /// Family Name in FHIR\r\n        string family_name;\r\n        /// Given Name in FHIR\r\n        string given_name;\r\n        /// Identifier of the user FHIR\r\n        string identifier;\r\n        /// Phone of the user FHIR\r\n        string phone;\r\n        /// Sex of the user FHIR\r\n        string gender;\r\n        /// Birth Date of the user FHIR\r\n        string birth_date;\r\n        /// About of the user FHIR\r\n        string about;\r\n        /// The Patient ID of the user FHIR\r\n        string patient_id;\r\n    }\r\n\r\n    /// OnGoing Study\r\n    struct ongoing_struct {\r\n        uint256 ongoing_id;\r\n        uint256 study_id;\r\n        uint256 user_id;\r\n        string date;\r\n        string given_permission;\r\n    }\r\n\r\n    /// Question Answers of Survey\r\n    struct survey_question_answer_struct {\r\n        uint256 answer_id;\r\n        uint256 study_id;\r\n        uint256 user_id;\r\n        uint256 survey_id;\r\n        string section_id;\r\n        string question_id;\r\n        string answer;\r\n    }\r\n\r\n    /// Completed Survey Study\r\n    struct completed_survey_struct {\r\n        uint256 completed_survey_id;\r\n        uint256 study_id;\r\n        uint256 user_id;\r\n        uint256 survey_id;\r\n        string date;\r\n    }\r\n    /// Completed Informed Consent Study\r\n    struct completed_informed_consent_struct {\r\n        uint256 completed_informed_consent_id;\r\n        uint256 study_id;\r\n        uint256 user_id;\r\n        string date;\r\n    }\r\n\r\n    uint256 public _UserIds;\r\n    uint256 public _FhirIds;\r\n    uint256 public _StudyIds;\r\n    uint256 public _SubjectIds;\r\n    uint256 public _SurveyIds;\r\n    uint256 public _SurveyCategoryIds;\r\n    uint256 public _OngoingIds;\r\n    uint256 public _AnsweredIds;\r\n    uint256 public _CompletedSurveyIds;\r\n    uint256 public _CompletedInformedConsentIds;\r\n\r\n    /// The map of all the Users login information.\r\n    mapping(uint256 => user_struct) private _userMap;\r\n    /// The map of all the Studies information.\r\n    mapping(uint256 => study_struct) public _studyMap;\r\n    mapping(uint256 => string) public _studyAges;\r\n    mapping(uint256 => string) public _studyTitles; //study id => Study title ages groups answers JSON\r\n    /// The map of all the Rewards information.\r\n    mapping(uint256 => string) public _studyAudienceMap; //study id => Audience JSON\r\n    /// The map of all the Surveys information.\r\n    mapping(uint256 => survey_struct) public _surveyMap;\r\n    /// The map of all the Survey Category .\r\n    mapping(uint256 => survey_category_struct) public _categoryMap;\r\n    /// The map of all the Survey Sections  .\r\n    mapping(uint256 => string) public _sectionsMap; //Survey id => All sections\r\n\r\n    /// The map of all the FHIR information.\r\n    mapping(uint256 => fhir_struct) public _fhirMap; //User id => user FHIR\r\n    /// The map of all the OnGoing Studies.\r\n    mapping(uint256 => ongoing_struct) public _ongoingMap;\r\n    /// The map of all the Question Answerd in a Survey.\r\n    mapping(uint256 => survey_question_answer_struct)\r\n        public _questionanswerdMap;\r\n    /// The map of all the Completed Surveys.\r\n    mapping(uint256 => completed_survey_struct) public _completedsurveyMap;\r\n\r\n    /// The map of all the Completed Informed Consent.\r\n    mapping(uint256 => completed_informed_consent_struct)\r\n        public _completedinformedMap;\r\n\r\n    //Login User\r\n    function CheckEmail(\r\n        string memory email\r\n    ) public view returns (string memory) {\r\n        ///Getting the found account\r\n        for (uint256 i = 0; i < _UserIds; i++) {\r\n            if (\r\n                keccak256(bytes(_userMap[i].email)) == keccak256(bytes(email))\r\n            ) {\r\n                ///Returning user id\r\n                return Strings.toString(i);\r\n            }\r\n        }\r\n\r\n        ///Returning False if not found user\r\n        return \"False\";\r\n    }\r\n\r\n    //CreateAccount\r\n    function CreateAccount(\r\n        string memory full_name,\r\n        string memory email,\r\n        string memory password,\r\n        string memory accesstoken,\r\n        string memory walletaddress,\r\n        string memory birth_date\r\n    ) public {\r\n        // Store the metadata of user in the map.\r\n        _userMap[_UserIds] = user_struct({\r\n            user_id: _UserIds,\r\n            name: full_name,\r\n            email: email,\r\n            password: password,\r\n            walletaddress: walletaddress,\r\n            image: \"https://i.postimg.cc/SsxGw5cZ/person.jpg\",\r\n            credits: 0,\r\n            accesstoken: accesstoken,\r\n            fhirid: _UserIds\r\n        });\r\n        _fhirMap[_UserIds].birth_date = birth_date;\r\n        _fhirMap[_UserIds].user_id = _UserIds;\r\n\r\n        _UserIds++;\r\n    }\r\n\r\n    //Update AccessToken\r\n    function UpdateAccessToken(\r\n        uint256 userid,\r\n        string memory accesstoken\r\n    ) public {\r\n        _userMap[userid].accesstoken = accesstoken;\r\n    }\r\n\r\n    //Login User\r\n    function Login(\r\n        string memory email,\r\n        string memory password\r\n    ) public view returns (string memory) {\r\n        ///Getting the found account\r\n        for (uint256 i = 0; i < _UserIds; i++) {\r\n            if (\r\n                keccak256(bytes(_userMap[i].email)) ==\r\n                keccak256(bytes(email)) &&\r\n                keccak256(bytes(_userMap[i].password)) ==\r\n                keccak256(bytes(password))\r\n            ) {\r\n                ///Returning user id\r\n                return Strings.toString(i);\r\n            }\r\n        }\r\n\r\n        ///Returning False if not found user\r\n        return \"False\";\r\n    }\r\n\r\n    //Create Study\r\n    function CreateStudy(\r\n        uint256 user_id,\r\n        string memory image,\r\n        string memory title,\r\n        string memory description,\r\n        string memory permission,\r\n        uint256 contributors,\r\n        uint256 audience,\r\n        uint256 budget\r\n    ) public {\r\n        // Store the metadata of Study in the map.\r\n        _studyMap[_StudyIds] = study_struct({\r\n            study_id: _StudyIds,\r\n            user_id: user_id,\r\n            image: image,\r\n            title: title,\r\n            description: description,\r\n            permission: permission,\r\n            contributors: contributors,\r\n            audience: audience,\r\n            budget: budget,\r\n            reward_type: \"HBAR\",\r\n            reward_price: 0,\r\n            total_spending_limit: budget\r\n        });\r\n        _StudyIds++;\r\n    }\r\n\r\n    //Create Survey\r\n    function CreateSurvey(\r\n        uint256 study_id,\r\n        uint256 user_id,\r\n        string memory name,\r\n        string memory description,\r\n        string memory date,\r\n        string memory image,\r\n        uint256 reward\r\n    ) public payable {\r\n        // Store the metadata of Survey in the map.\r\n        _surveyMap[_SurveyIds] = survey_struct({\r\n            survey_id: _SurveyIds,\r\n            study_id: study_id,\r\n            user_id: user_id,\r\n            name: name,\r\n            description: description,\r\n            date: date,\r\n            image: image,\r\n            reward: reward,\r\n            submission: 0\r\n        });\r\n        _SurveyIds++;\r\n    }\r\n\r\n    //Create or Save Sections\r\n    function CreateOrSaveSections(\r\n        uint256 survey_id,\r\n        string memory metadata\r\n    ) public {\r\n        // Store the metadata of all Sections in the map.\r\n        _sectionsMap[survey_id] = metadata;\r\n    }\r\n    //Update Ages Groups\r\n    function UpdateStudyAges(uint256 study_id, string memory metadata) public {\r\n        // Update ages group in study.\r\n        _studyAges[study_id] = metadata;\r\n    }\r\n\r\n    //Create or Save Study title\r\n    function CreateOrSaveStudyTitle(\r\n        uint256 study_id,\r\n        string memory metadata\r\n    ) public {\r\n        // Store the metadata of all Sections in the map.\r\n        _studyTitles[study_id]= metadata;\r\n    }\r\n    //Create Survey Category\r\n    function CreateSurveyCategory(\r\n        string memory name,\r\n        string memory image\r\n    ) public {\r\n        // Store the metadata of Survey Category in the map.\r\n        _categoryMap[_SurveyCategoryIds] = survey_category_struct({\r\n            name: name,\r\n            image: image\r\n        });\r\n        _SurveyCategoryIds++;\r\n    }\r\n\r\n    //Get All Survey by Study ID\r\n    function getAllSurveysIDByStudy(\r\n        uint256 study_id\r\n    ) public view returns (uint256[] memory) {\r\n        uint256 _TemporarySearch = 0;\r\n\r\n        for (uint256 i = 0; i < _SurveyIds; i++) {\r\n            if (_surveyMap[i].study_id == study_id) {\r\n                _TemporarySearch++;\r\n            }\r\n        }\r\n        uint256[] memory _SearchedStore = new uint256[](_TemporarySearch);\r\n\r\n        uint256 _SearchIds2 = 0;\r\n\r\n        for (uint256 i = 0; i < _SurveyIds; i++) {\r\n            if (_surveyMap[i].study_id == study_id) {\r\n                _SearchedStore[_SearchIds2] = i;\r\n                _SearchIds2++;\r\n            }\r\n        }\r\n\r\n        return _SearchedStore;\r\n    }\r\n\r\n    //Get UserDetails by userid\r\n    function getUserDetails(\r\n        uint256 user_id\r\n    )\r\n        public\r\n        view\r\n        returns (\r\n            string memory,\r\n            uint256,\r\n            string memory,\r\n            string memory,\r\n            string memory,\r\n            string memory,\r\n            uint256\r\n        )\r\n    {\r\n        return (\r\n            _userMap[user_id].image,\r\n            _userMap[user_id].credits,\r\n            _userMap[user_id].name,\r\n            _userMap[user_id].email,\r\n            _userMap[user_id].walletaddress,\r\n            _userMap[user_id].accesstoken,\r\n            _userMap[user_id].fhirid\r\n        );\r\n    }\r\n\r\n    //Update Study\r\n    function UpdateStudy(\r\n        uint256 study_id,\r\n        string memory image,\r\n        string memory title,\r\n        string memory description,\r\n        uint256 budget\r\n    ) public {\r\n        // Update the metadata of Study in the map.\r\n        _studyMap[study_id].image = image;\r\n        _studyMap[study_id].title = title;\r\n        _studyMap[study_id].description = description;\r\n        _studyMap[study_id].budget = budget;\r\n    }\r\n\r\n    //Update Survey\r\n    function UpdateSurvey(\r\n        uint256 survey_id,\r\n        string memory name,\r\n        string memory description,\r\n        string memory image,\r\n        uint256 reward\r\n    ) public {\r\n        // Update the metadata of Survey in the map.\r\n        _surveyMap[survey_id].name = name;\r\n        _surveyMap[survey_id].description = description;\r\n        _surveyMap[survey_id].image = image;\r\n        _surveyMap[survey_id].reward = reward;\r\n    }\r\n\r\n    //Update Reward\r\n    function UpdateReward(\r\n        uint256 study_id,\r\n        string memory reward_type,\r\n        uint256 reward_price,\r\n        uint256 total_spending_limit\r\n    ) public {\r\n        // Update the metadata of Study in the map.\r\n        _studyMap[study_id].reward_type = reward_type;\r\n        _studyMap[study_id].reward_price = reward_price;\r\n        _studyMap[study_id].total_spending_limit = total_spending_limit;\r\n    }\r\n\r\n    //Update Audience\r\n    function UpdateAudience(\r\n        uint256 study_id,\r\n        string memory audience_info\r\n    ) public {\r\n        // Update the metadata of Audience in the map.\r\n        _studyAudienceMap[study_id] = audience_info;\r\n    }\r\n\r\n    //Update User\r\n    function UpdateUser(\r\n        uint256 user_id,\r\n        string memory image,\r\n        uint256 credits\r\n    ) public {\r\n        // Update the metadata of User in the map\r\n        _userMap[user_id].image = image;\r\n        _userMap[user_id].credits = credits;\r\n    }\r\n\r\n    //Update FHIR\r\n    function UpdateFhir(\r\n        uint256 user_id,\r\n        string memory walletaddress,\r\n        string memory family_name,\r\n        string memory given_name,\r\n        string memory identifier,\r\n        string memory phone,\r\n        string memory gender,\r\n        string memory birth_date,\r\n        string memory about,\r\n        string memory patient_id\r\n    ) public {\r\n        // Update the metadata of FHIR in the map.\r\n        _fhirMap[user_id].user_id = user_id;\r\n        _fhirMap[user_id].family_name = family_name;\r\n        _fhirMap[user_id].given_name = given_name;\r\n        _fhirMap[user_id].identifier = identifier;\r\n        _fhirMap[user_id].phone = phone;\r\n        _fhirMap[user_id].gender = gender;\r\n        _fhirMap[user_id].birth_date = birth_date;\r\n        _fhirMap[user_id].about = about;\r\n        _fhirMap[user_id].patient_id = patient_id;\r\n        _userMap[user_id].walletaddress = walletaddress;\r\n    }\r\n\r\n    function CreateOngoingStudy(\r\n        uint256 study_id,\r\n        uint256 user_id,\r\n        string memory date,\r\n        string memory given_permission\r\n    ) public {\r\n        // Store the metadata of Ongoing Study in the map.\r\n        _ongoingMap[_OngoingIds] = ongoing_struct({\r\n            ongoing_id: _OngoingIds,\r\n            study_id: study_id,\r\n            user_id: user_id,\r\n            date: date,\r\n            given_permission: given_permission\r\n        });\r\n        _studyMap[study_id].contributors += 1;\r\n        _OngoingIds++;\r\n    }\r\n\r\n    function GetOngoingStudy(\r\n        uint256 user_id\r\n    ) public view returns (string memory) {\r\n        ///Getting the found Ongoing Study\r\n        for (uint256 i = 0; i < _OngoingIds; i++) {\r\n            if (_ongoingMap[i].user_id == user_id) {\r\n                ///Returning Study id\r\n                return Strings.toString(_ongoingMap[i].study_id);\r\n            }\r\n        }\r\n        ///Returning False if not found\r\n        return \"False\";\r\n    }\r\n\r\n    function CreateQuestionAnswer(\r\n        uint256 study_id,\r\n        uint256 user_id,\r\n        uint256 survey_id,\r\n        string memory section_id,\r\n        string memory question_id,\r\n        string memory answer\r\n    ) public {\r\n        // Store the metadata of Question Answered in the map.\r\n        _questionanswerdMap[_AnsweredIds] = survey_question_answer_struct({\r\n            answer_id: _AnsweredIds,\r\n            study_id: study_id,\r\n            user_id: user_id,\r\n            survey_id: survey_id,\r\n            section_id: section_id,\r\n            question_id: question_id,\r\n            answer: answer\r\n        });\r\n        _AnsweredIds++;\r\n    }\r\n\r\n    function CreateCompletedSurveys(\r\n        uint256 survey_id,\r\n        uint256 user_id,\r\n        string memory date,\r\n        uint256 study_id\r\n    ) public {\r\n        // Store the metadata of Completed Survyes in the map.\r\n        _completedsurveyMap[_CompletedSurveyIds] = completed_survey_struct({\r\n            completed_survey_id: _CompletedSurveyIds,\r\n            study_id: study_id,\r\n            user_id: user_id,\r\n            survey_id: survey_id,\r\n            date: date\r\n        });\r\n        _surveyMap[survey_id].submission += 1;\r\n        _surveyMap[survey_id].date = date;\r\n        _CompletedSurveyIds++;\r\n    }\r\n\r\n    function CreateCompletedInformedConsent(\r\n        uint256 user_id,\r\n        string memory date,\r\n        uint256 study_id\r\n    ) public {\r\n        // Store the metadata of Completed Informed Consent in the map.\r\n        _completedinformedMap[\r\n            _CompletedInformedConsentIds\r\n        ] = completed_informed_consent_struct({\r\n            completed_informed_consent_id: _CompletedInformedConsentIds,\r\n            study_id: study_id,\r\n            user_id: user_id,\r\n            date: date\r\n        });\r\n        _CompletedInformedConsentIds++;\r\n    }\r\n    function WithDrawAmount(\r\n        uint256 userid,\r\n        uint256 amount,\r\n        address person\r\n    ) public {\r\n        (bool sent, ) = payable(person).call{value: amount}(\"\");\r\n\r\n        require(sent, \"Send failed\");\r\n        _userMap[userid].credits -= amount;\r\n    }\r\n\r\n    function getAllCompletedSurveysIDByUser(\r\n        uint256 user_id\r\n    ) public view returns (uint256[] memory) {\r\n        // Getting all completed surveys id by user id\r\n        uint256 _TemporarySearch = 0;\r\n\r\n        for (uint256 i = 0; i < _CompletedSurveyIds; i++) {\r\n            if (_completedsurveyMap[i].user_id == user_id) {\r\n                _TemporarySearch++;\r\n            }\r\n        }\r\n        uint256[] memory _SearchedStore = new uint256[](_TemporarySearch);\r\n\r\n        uint256 _SearchIds2 = 0;\r\n\r\n        for (uint256 i = 0; i < _CompletedSurveyIds; i++) {\r\n            if (_completedsurveyMap[i].user_id == user_id) {\r\n                _SearchedStore[_SearchIds2] = i;\r\n                _SearchIds2++;\r\n            }\r\n        }\r\n\r\n        return _SearchedStore;\r\n    }\r\n\r\n    function getCompletedInformedConsentId(\r\n        uint256 user_id,\r\n        uint256 study_id\r\n    ) public view returns (string memory) {\r\n        for (uint256 i = 0; i < _CompletedInformedConsentIds; i++) {\r\n            if (\r\n                _completedinformedMap[i].user_id == user_id &&\r\n                _completedinformedMap[i].study_id == study_id\r\n            ) {\r\n                return Strings.toString(i);\r\n            }\r\n        }\r\n        return \"False\";\r\n    }\r\n}\r\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}